x <- cbind(x1=3, x2=c(4:1,2:5))
x
lsf.str()
ls()
rm(x)
head(leaf.survey.4)
srv5Mem <- read.csv("~/Documents/TPMs/Server 10-1-0-5 TPM/srv5Mem.csv")
View(srv5Mem)
library(reshape2)
srv5.mem.melt <- melt(srv5Mem, id=c("Time"))
head(srv5.mem.melt)
ggplot(srv5.mem.melt, aes(x=value, group=variable))
library("ggplot2", lib.loc="/Users/hsparra/Library/R/3.0/library")
ggplot(srv5.mem.melt, aes(x=value, group=variable))
ggplot(srv5.mem.melt, aes(x=value, group=variable)) + geom_density()
ggplot(srv5.mem.melt, aes(x=value)) + geom_density() + facet_grid(variable ~ .)
ggplot(srv5.mem.melt[variable == "Usage...Exercise.Monitor"], aes=(x=value)) + geom_density()
ggplot(subset(srv5.mem.melt, variable == "Usage...Exercise.Monitor"), aes=(x=value)) + geom_density()
ggplot(srv5.mem.melt, aes=(x=value)) + geom_density()
ggplot(subset(srv5.mem.melt, variable == "Usage...Exercise.Monitor"), aes(x=value)) + geom_density()
ggplot(subset(srv5.mem.melt, variable == "Usage...Exercise.Monitor"), aes(x=value, colour=value)) + geom_density()
ggplot(subset(srv5.mem.melt, variable == "Usage...Exercise.Monitor"), aes(x=variable)) + geom_density()
ggplot(subset(srv5.mem.melt, variable == "Usage...Exercise.Monitor"), aes(x=value)) + geom_density()
ggplot(subset(srv5.mem.melt, variable == "Usage...Exercise.Monitor"), aes(x=value, colour=value)) + geom_density()
ggplot(subset(srv5.mem.melt, variable == "Usage...Exercise.Monitor"), aes(x=value, colour=variable)) + geom_density()
ggplot(subset(srv5.mem.melt, variable == "Usage...Exercise.Monitor"), aes(x=value, colour=variable)) + geom_histogram()
remove.packages("plyr")
remove.packages("colorspace")
remove.packages("RColorBrewer")
remove.packages("dichromat")
remove.packages("munsell")
remove.packages("labeling")
remove.packages("gtable")
remove.packages("scales")
remove.packages("proto")
remove.packages("reshape2")
remove.packages("ggplot2")
install.packages("ggplot2")
library(MASS)
install.packages("reshape2")
remove.packages("ggplot2")
remove.packages("colorspace")
remove.packages("dichromat")
remove.packages("RColorBrewer")
remove.packages("munsell")
remove.packages("labeling")
remove.packages("gtable")
remove.packages("scales")
remove.packages("proto")
remove.packages("plyr")
remove.packages("reshape2")
remove.packages("reshape2")
remove.packages("plyr")
install.packages("plyr")
install.packages("reshape2")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
str(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qnorm(.975)
dnorm(1.959964)
data(sleep)
head(sleep)
pnorm(93, mean=100, sd=10)
pnorm(92, mean=100, sd=10)
pnorm(90, mean=100, sd=10)
pnorm(91, mean=100, sd=10)
(.88*.95)/((.88*.95)+((1-.88)*.05))
qnorm(.95, mean=100, sd=10)
qnorm(.95, mean=100, sd=10, lower.tail=false)
qnorm(.95, mean=100, sd=10, lower.tail=FALSE)
qnorm(.05, mean=100, sd=10, lower.tail=FALSE)
qnorm(.95, mean=100, sd=(10^2/50))
qnorm(.05, mean=100, sd=(10^2/50), lower.tail=FALSE)
round(qnorm(.05, mean=100, sd=(10^2/50), lower.tail=FALSE),3)
round(qnorm(.05, mean=100, sd=(10^2/50), lower.tail=FALSE),4)
round(qnorm(.05, mean=100, sd=(10^2/50), lower.tail=FALSE),3)
pbinom(4, size=6, prob=0.5, lower.tail=FALSE)
pnorm(.51, mean=.5, sd=((1/12)/100), lower.tail=FALSE)
x <- 1/12/100
x
x <- (1/12)^2/100
x
pnorm(.51, mean=.5, sd=x, lower.tail=F)
pnorm(.51, mean=.5, sd=sqrt(x), lower.tail=F)
x <- 1/12/100
pnorm(.51, mean=.5, sd=sqrt(x), lower.tail=F)
y <- seq(1,6)
y
x <- rep(1/6,6)
x
x
y
z <- x*y
z
var(z)
mean(z)
sum(z)
z <- x^2*y
z
var(z)
x
y
z <- x*y^2
var9z
var(z)
mean9z
z
var(x)
var(y)
mean(y)
z
mean(z) - mean(y)^2
mean(z)
y2 <- y^2
mean(y2) - mean(y)^2
(mean(y2)-mean(y)^2)/10
ppois(20, lambda=16.5*2)
ppois(20, lambda=16.5*2)*100
install.packages("UsingR")
library(UsingR)
data(galton)
library(manipulate)
myHist <- function(mu){}
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu,mu), c(0,150), col="red",lwd=5)
mse <- mean((galton$child - mue)^2)
text(63, 150, paste("mu = ", round(mse,2)))
}
manipulat(myHist(mu), mu=slider(62, 74, step = 0.5))
manipulate(myHist(mu), mu=slider(62, 74, step = 0.5))
myHist <- function(mu){}
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu,mu), c(0,150), col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", round(mse,2)))
}
manipulate(myHist(mu), mu=slider(62, 74, step = 0.5))
install.packages("googleVis")
chickwts %>% ggvis(~feed, ~weight) %>% layer_boxplots()
library(ggvis)
chickwts %>% ggvis(~feed, ~weight) %>% layer_boxplots()
install.packages("rJava", type="source")
system("env | grep LD")
library(data.table)
library(SnowballC)
library(tm)
library(RWeka)
library(ggplot2)
library(magrittr)
library(tau)
library(dplyr)
library(ngram)
getFileData <- function(inFile) {
con <- file(inFile,"r")
fullFile <- readLines(con)
close(con)
print(dim(fullFile))
fullFile
}
removeNonASCII <- function(x) {
iconv(x, "UTF-8", "ASCII", sub="")
}
cleanText <- function(data) {
data <- removeNonASCII(data)
data <- tolower(data)
data <- gsub("/|@|\\|", " ", data)
data <- gsub("[0-9]", "", data)       # remove numbers
# remove text in brackets since probably has different context
#data <- c(gsub("[(].+?[)]", "", data), regmatches(data, regexpr("[(].+?[)]", data)))
# exclude punctuations
data <- gsub("\\]", " ", gsub("\\[", " ", gsub("[…|•“”!\"#&$%\\(\\)*+./:;<=>?@^_`\\{|\\}~,/\\-]", " ", data)))
data <- gsub("[ ]{2, }", " ", data)         # remove extra whitespaces
}
sm_t <- getFileData("../twit_samp.txt")
setwd("~/Repos/coursera_ds/Capstone/Analysis")
sm_t <- getFileData("../twit_samp.txt")
sm_t <- cleanText(sm_t)
myStopWords <- stopwords(kind = "english")
sm_t <- remove_stopwords(sm_t, myStopWords, lines=TRUE)
sm_t2 <- tokenize(sm_t, lines = TRUE) %>%
wordStem %>%
paste(collapse = "") %>%
strsplit(split = "\n") %>%
unlist
head(sm_t2)
bigrams <- NGramTokenizer(sm_t, control = Weka_control(min=2, max=2, dilimiters = " '"))
bi <- data.table(bigrams)
bi.cnt <- bi[,count := .N, by = bigrams]
bi.cnt[order(count)]
bi.cnt[order(-count)]
bi.cnt2 <- unique(bi.cnt)
bi.cnt2[order(-count)]
bi.cnt2[order(count)]
