pbinom(4, size = 6, prob = .5, lower.tail = F)
pnorm(.51, mean=.5, sd=sqrt(1/12/100),lower.tail = F)
mean((1:6 - 3.5)^2)
ppois(20, lambda = 16.5*2)
.8*.2/.2
(.75*.3)/(.75*.3+.48*.7)
pnorm(70, mean=80, sd=10)
qnorm(.95, 1100, 75)
qnorm(.95, 1100, 75/sqrt(100))
pbinom(3, prob = .5, size = 5, lower.tail = F)
pbinom(4, prob = .5, size = 5, lower.tail = F)
pbinom(5, prob = .5, size = 5, lower.tail = F)
pbinom(3, prob = .5, size = 5, lower.tail = F)
pnorm(16, mean=15, sd=10/sqrt(10)) - pnorm(14, mean=15, sd=10/sqrt(10))
pnorm(16, mean=15, sd=10/sqrt(10))
pnorm(14, mean=15, sd=10/sqrt(10))
pnorm(1, mean=0, sd=1) - pnorm(-1, mean=0, sd=1)
pnorm(16, mean=15, sd=1 - pnorm(14, mean=15, sd=1)
)
pnorm(16, mean=15, sd=1) - pnorm(14, mean=15, sd=1)
pnorm(16, mean=15, sd=10/sqrt(10)) - pnorm(14, mean=15, sd=10/sqrt(100))
pnorm(16, mean=15, sd=10/sqrt(100)) - pnorm(14, mean=15, sd=10/sqrt(100))
1/12/100
1/12
ppois(10, lambda = 5*3)
combn(9,3)
?permutation
n <- 9
x <- 10
factorial(n)/(factorial(x)*factorial(n-x))
factorial(n)
factorial(x)
factorial(n-x)
factorial(n - x)
x <- 3
factorial(n)/(factorial(x)*factorial(n-x))
factorial(n)/(factorial(x)
)
factorial(n)/(factorial(n-x))
require(graphics)
pairs(mtcars, main = "mtcars data")
require(psych)
library(psych)
install.packages(psych)
install.packages("psych")
library(psych)
pair.panel(mtcars)
require(psych)
pairs.panels(mtcars)
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,
panel = panel.smooth, rows = 1)
?coplot
coplot(mpg ~ am | as.factor(cyl), data = mtcars,
panel = panel.smooth, rows = 1)
plot(mpg ~ am, data=mtcars)
plot(mpg ~ am _ cyl)
plot(mpg ~ am + cyl)
plot(mpg ~ am + cyl, data=mtcars)
lm1 <- lm(mpg ~ am)
lm1 <- lm(mpg ~ am, data=mtcars)
lm2 <- lm(mpg ~ am + cyl, data=mtcars)
lm2 <- lm(mpg ~ am + cyl + disp, data=mtcars)
lm2 <- lm(mpg ~ am + cyl, data=mtcars)
lm3 <- lm(mpg ~ am + cyl + disp, data=mtcars)
anova(lm1, lm2, lm3)
summary(lm1)$coef
summary(lm2)$coef
lm2 <- lm(mpg ~ am + as.factor(cyl), data=mtcars)
lm3 <- lm(mpg ~ am + as.factor(cyl) + disp, data=mtcars)
anova(lm1, lm2, lm3)
summary(lm2)$coef
lm4 <- lm(mpg ~ am + as.factor(cyl) + drat, data=mtcars)
anova(lm1, lm2, lm4)
lma <- lm(mpg ~ cyl, data=mtcars)
lma <- lm(mpg ~ as.factor(cyl), data=mtcars)
anova(lma, lm2, lm3)
lm5 <- lm(mpg ~ as.factor(cyl) + hp, data=mtcars)
anova(lm1, lm2, lm5)
anova(lma, lm2, lm3)
anova(lma, lm2, lm5)
anova(lma, lm5)
lm5 <- lm(mpg ~ as.factor(cyl) + drat, data=mtcars)
anova(lma, lm5)
resid <- resid(lma)
plot(resid)
plot(resid(lm1))
plot(resid(lm2))
plot(mpg ~ am, data=mtcars, xlab = "Automatic or Manual Transmision", ylab = "mpg", frame = FALSE)
plot(mpg ~ am, data=mtcars, xlab = "Automatic or Manual Transmision", ylab = "mpg", frame = FALSE)
plot(mpg ~ am, data=mtcars, frame = FALSE)
plot(mpg ~ am, data=mtcars)
dev.off()
plot(mpg ~ am, data=mtcars, frame = FALSE)
plot(mpg ~ am, data=mtcars)
resid <- resid(lma)
resid <- resid(lma)
plot(resid)
plot(mpg ~ am, data=mtcars)
plot(mpg ~ am, data=mtcars, xlab = "Automatic or Manual Transmision", ylab = "mpg", frame = FALSE)
abline(fit1)
fit1 <- lm(mpg ~ am, data=mtcars)
abline(fit1, lwd=2)
dev.off()
plot(mpg ~ am, data=mtcars, xlab = "Automatic or Manual Transmision", ylab = "mpg", frame = FALSE)
abline(fit1, lwd=2)
plot(mpg ~ am, data=mtcars, xlab = "Automatic or Manual Transmision", ylab = "mpg", frame = FALSE)
abline(fit1, lwd=2)
lamda <- 1  # per 100 days
recent <- 10 / 1787 * 100
#ppois(recent, lamda)
l <- 1 / 100  # per 100 days
r <- 10 / 1787
#ppois(r, l)
ppois(10, lambda=1*1787/100)
install.packages("caret")
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
str(AlzheimerDisease)
str(diagnosis)
str(predictors)
library("car", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
detach("package:car", unload=TRUE)
detach("package:AlzheimerDisease", unload=TRUE)
detach("AlzheimerDisease")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
str(concrete)
featurePlot(x=training[,], y=training$CompressiveStrength, plot="pairs")
pairs(training)
qplot(index, CompressiveStrength, data=concreate)
qplot(index, CompressiveStrength, data=concrete)
qplot(rownum, CompressiveStrength, data=concrete)
qplot(rownum(), CompressiveStrength, data=concrete)
qplot(seq(1,(length(CompressiveStrength))), CompressiveStrength, data=concrete)
qplot(seq(1,(length(CompressiveStrength))), CompressiveStrength, colour=FlyAsh, data=concrete)
unique(FlyAsh)
unique(concrete$FlyAsh)
library(Hmisc)
cutVal <- cut2(concrete$FlyAsh,g=5)
qplot(seq(1,(length(CompressiveStrength))), CompressiveStrength, colour=cutVal, data=concrete)
cutVal <- cut2(concrete$FlyAsh,g=4)
qplot(seq(1,(length(CompressiveStrength))), CompressiveStrength, colour=cutVal, data=concrete)
str(concrete)
cutVal <- cut2(concrete$FlyAsh,g=5)
qplot(CompressiveStrength, seq(1,(length(CompressiveStrength))), colour=cutVal, data=concrete)
cutVal <- cut2(concrete$FlyAsh,g=3)
qplot(seq(1,(length(CompressiveStrength))), CompressiveStrength, colour=cutVal, data=concrete)
cutVal <- cut2(concrete$FlyAsh,g=4)
qplot(seq(1,(length(CompressiveStrength))), CompressiveStrength, colour=cutVal, data=concrete)
cutVal <- cut2(concrete$FlyAsh,g=5)
qplot(seq(1,(length(CompressiveStrength))), CompressiveStrength, colour=cutVal, data=concrete)
qplot(seq(1,(length(CompressiveStrength))), CompressiveStrength, colour=cutVal, data=training)
cutVal <- cut2(training$FlyAsh,g=5)
qplot(seq(1,(length(CompressiveStrength))), CompressiveStrength, colour=cutVal, data=training)
qplot(seq(1,(length(CompressiveStrength))), CompressiveStrength, colour=FlyAsh, data=training)
str(training)
qplot(seq(1,(length(CompressiveStrength))), CompressiveStrength, colour=cut2(Cement,g=4), data=training)
qplot(seq(1,(length(CompressiveStrength))), CompressiveStrength, colour=cut2(CBlastFurnaceSlag,g=4), data=training)
qplot(seq(1,(length(CompressiveStrength))), CompressiveStrength, colour=cut2(BlastFurnaceSlag,g=4), data=training)
qplot(seq(1,(length(CompressiveStrength))), CompressiveStrength, colour=cut2(Water,g=4), data=training)
qplot(seq(1,(length(CompressiveStrength))), CompressiveStrength, colour=cut2(Superplasticizer,g=4), data=training)
qplot(seq(1,(length(CompressiveStrength))), CompressiveStrength, colour=cut2(CourseAggregate,g=4), data=training)
qplot(seq(1,(length(CompressiveStrength))), CompressiveStrength, colour=cut2(CoarseAggregate,g=4), data=training)
qplot(seq(1,(length(CompressiveStrength))), CompressiveStrength, colour=cut2(FineAggregate,g=4), data=training)
qplot(seq(1,(length(CompressiveStrength))), CompressiveStrength, colour=cut2(Age,g=4), data=training)
qplot(seq(1,(length(CompressiveStrength))), CompressiveStrength, colour=cut2(FlyAsh,g=4), data=training)
hist(training$Superplasticizer)
qplot(training$Superplasticizer)
qplot(log(training$Superplasticizer + 1)
)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
trainIL <- training[,grep("^IL",colnames()]
trainIL <- training[,grep("^IL",colnames())]
trainIL <- training[,grep("^IL",colnames(training))]
dim(trainIL)
str(trainIL)
preProc <- preProcess(trainIL, method='PCA',pcaComp=7)
preProc <- preProcess(trainIL, method="pca",pcaComp=7)
trainPC <- train(diagnosis ~ ., method="glm", data=adData)
adData2 <- data.frame(diagnosis, trainIL)
trainIL <- training[,grep("^IL",colnames(training)) | colnames(training) == "diagnosis"]
trainIL <- training[,c(grep("^IL",colnames(training)),colnames(traiing) == "diagnosis" )]
trainIL <- training[,c(grep("^IL",colnames(training)),colnames(training) == "diagnosis" )]
str(trainIL
)
preProc <- preProcess(trainIL[,-diagnosis], method="pca",pcaComp=7)
preProc <- preProcess(trainIL[,-c(diagnosis)], method="pca",pcaComp=7)
preProc <- preProcess(trainIL[,-13], method="pca",pcaComp=7)
trainPC <- predict(preProc, trainIL[,-13])
str(trainPC)
modelFit <- train(trainIL$diagnosis ~ ., method="glm", data=trainPC)
install.packages("e1071")
library(e1071)
modelFit <- train(trainIL$diagnosis ~ ., method="glm", data=trainPC)
testPC <- predict(preProc, testing[,-1])
summary(modelFit)
summary(trainPC)
trainPC <- predict(preProc, training[,-1])
trainPC <- predict(preProc, trainIL[,-13])
testIL <- testing[,c(grep("^IL",colnames(testing)),colnames(testing) == "diagnosis" )]
str(testPC)
str(testIL)
testPC <- predict(preProc, testIL[,-13])
confusionMatrix(testIL$diagnosis,predict(modelFit,testPC))
preProc <- preProcess(trainIL[,-13], method="pca",pcaComp=11)
trainPC <- predict(preProc, trainIL[,-13])
#trainPC <- predict(preProc, training[,-1])
modelFit <- train(trainIL$diagnosis ~ ., method="glm", data=trainPC)
testIL <- testing[,c(grep("^IL",colnames(testing)),colnames(testing) == "diagnosis" )]
testPC <- predict(preProc, testIL[,-13])
confusionMatrix(testIL$diagnosis,predict(modelFit,testPC))
trainIL <- training[,c(grep("^IL",colnames(training)),colnames(training) == "diagnosis" )]
preProc <- preProcess(trainIL[,-13], method="pca",pcaComp=10)
trainPC <- predict(preProc, trainIL[,-13])
#trainPC <- predict(preProc, training[,-1])
modelFit <- train(trainIL$diagnosis ~ ., method="glm", data=trainPC)
testIL <- testing[,c(grep("^IL",colnames(testing)),colnames(testing) == "diagnosis" )]
testPC <- predict(preProc, testIL[,-13])
confusionMatrix(testIL$diagnosis,predict(modelFit,testPC))
preProc <- preProcess(trainIL[,-13], method="pca",pcaComp=12)
trainPC <- predict(preProc, trainIL[,-13])
#trainPC <- predict(preProc, training[,-1])
modelFit <- train(trainIL$diagnosis ~ ., method="glm", data=trainPC)
testIL <- testing[,c(grep("^IL",colnames(testing)),colnames(testing) == "diagnosis" )]
testPC <- predict(preProc, testIL[,-13])
confusionMatrix(testIL$diagnosis,predict(modelFit,testPC))
trainIL <- training[,c(grep("^IL",colnames(training)),colnames(training) == "diagnosis" )]
preProc <- preProcess(trainIL[,-13], method="pca",pcaComp=7)
trainPC <- predict(preProc, trainIL[,-13])
#trainPC <- predict(preProc, training[,-1])
modelFit <- train(trainIL$diagnosis ~ ., method="glm", data=trainPC)
summary(modelFit)
testIL <- testing[,c(grep("^IL",colnames(testing)),colnames(testing) == "diagnosis" )]
testPC <- predict(preProc, testIL[,-13])
confusionMatrix(testIL$diagnosis,predict(modelFit,testPC))
preProc <- preProcess(trainIL[,-13], method="pca",pcaComp=12)
trainPC <- predict(preProc, trainIL[,-13])
#trainPC <- predict(preProc, training[,-1])
modelFit <- train(trainIL$diagnosis ~ ., method="glm", data=trainPC)
testPC <- predict(preProc, testIL[,-13])
confusionMatrix(testIL$diagnosis,predict(modelFit,testPC))
summary(preProc)
summary(trainPC)
summary(trainIL)
modelFit <- train(trainIL$diagnosis ~ ., method="glm", preProces="glm", data=trainIL)
confusionMatrix(testIL$diagnosis, predict(modelFit, testIL))
modelFit <- train(trainIL$diagnosis ~ ., method="glm", preProces="pca", data=trainIL)
confusionMatrix(testIL$diagnosis, predict(modelFit, testIL))
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
str(trainIL)
trainIL <- training[,c(grep("^IL",colnames(training)),colnames(training) == "diagnosis" )]
testIL <- testing[,c(grep("^IL",colnames(testing)),colnames(testing) == "diagnosis" )]
preProc <- preProcess(trainIL[,-13], method="pca",pcaComp=12)
trainPC <- predict(preProc, training[,-1])
str(trainPC)
trainPC <- predict(preProc, trainIL[,-13])
str(trainPC)
str(trainIL)
preProc <- preProcess(trainIL[,-13], method="pca",pcaComp=7)
trainPC <- predict(preProc, trainIL[,-13])
str(trainIL)
str(trainPC)
modelFit <- train(trainIL$diagnosis ~ ., method="glm", data=trainPC)
summary(modelFit)
modelFit
preProc <- preProcess(trainIL[,-13], method="pca",pcaComp=10)
trainPC <- predict(preProc, trainIL[,-13])
#trainPC <- predict(preProc, training[,-1])
modelFit <- train(trainIL$diagnosis ~ ., method="glm", data=trainPC)
modelFit
preProc <- preProcess(trainIL[,-13], method="pca",pcaComp=12)
trainPC <- predict(preProc, trainIL[,-13])
#trainPC <- predict(preProc, training[,-1])
modelFit <- train(trainIL$diagnosis ~ ., method="glm", data=trainPC)
modelFit
modelFit <- train(trainIL$diagnosis ~ ., method="lm", data=trainPC)
trainIL <- training[,c(grep("^IL",colnames(training)))]
preProc <- preProcess(trainIL, method="pca",pcaComp=12)
trainPC <- predict(preProc, trainIL)
modelFit <- train(training$diagnosis ~ ., method="glm", data=trainPC)
modelfit
modelFit
preProc <- preProcess(trainIL, method="pca",pcaComp=7)
#trainPC <- predict(preProc, trainIL[,-13])
trainPC <- predict(preProc, trainIL)
#trainPC <- predict(preProc, training[,-1])
modelFit <- train(training$diagnosis ~ ., method="glm", data=trainPC)
modelFit
testPC <- predict(preProc, testIL[,-13])
confusionMatrix(testIL$diagnosis,predict(modelFit,testPC))
str(modelFit)
hed(trainPC)
head(trainPC)
cov(trainPC)
cov(trainPC)$daig
diag(trainPC)
diag(cov(trainPC))
preProc$sdev
trainPC$sdev
head(modelFit$fitted)
preProc <- preProcess(trainIL, method="pca",thresh=.8)
preProc
trainIL <- training[,c(grep("^IL",colnames(training)))]
preProc <- preProcess(trainIL, method="pca",thresh=.8)
#testIL <- testing[,c(grep("^IL",colnames(testing)),colnames(testing) == "diagnosis" )]
testIL <- testing[,c(grep("^IL",colnames(testing))]
trainPC <- predict(preProc, trainIL)
#trainPC <- predict(preProc, training[,-1])
modelFit <- train(training$diagnosis ~ ., method="glm", data=trainPC)
testPC <- predict(preProc, testIL[,-13])
confusionMatrix(testIL$diagnosis,predict(modelFit,testPC))
confusionMatrix(testIL$diagnosis, predict(modelFit, testIL))$Accuracy
confusionMatrix(testIL$diagnosis, predict(modelFit, testIL))$results
modelFit$results
testPC$results
testIL <- testing[,c(grep("^IL",colnames(testing))]
trainPC <- predict(preProc, trainIL)
#trainPC <- predict(preProc, training[,-1])
modelFit <- train(training$diagnosis ~ ., method="glm", data=trainPC)
testPC <- predict(preProc, testIL[,-13])
#confusionMatrix(testIL$diagnosis,predict(modelFit,testPC))
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
testPC <- predict(preProc, testIL
#confusionMatrix(testIL$diagnosis,predict(modelFit,testPC))
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
testPC <- predict(preProc, testIL)
#confusionMatrix(testIL$diagnosis,predict(modelFit,testPC))
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
model2 <- train(training$diagnosis ~ ., method="glm", data=trainIL)
test2 <- predict(model2, testIL)
confusionMatric(testing$diagnosis, predict(model2,test2))
confusionMatrix(testing$diagnosis, predict(model2,test2))
summary(test2)
summary(testPC)
summary(model2)
model2
model2 <- train(training$diagnosis ~ ., method="glm", data=training)
test2 <- predict(model2, testIL)
model2 <- train(training$diagnosis ~ ., method="glm", data=trainIL)
test2 <- predict(model2, testIL)
model
model2
test2 <- predict(model2, newdata=testIL)
confusionMatrix(testing$diagnosis, predict(model2,test2))
confusionMatrix(test2, testing$diagnosis)
confusionMatrix(testing$diagnosis,predict(modelFit,testPC))
data(AlzheimerDisease)
# Answer
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
dim(training)
dim(testing)
class(training)
str(training)
data(AlzheimerDisease)
# Answer
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5)
training = adData[trainIndex,]
testing = adData[trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
dim(training)
dim(testing)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[-testIndex,]
testing = adData[testIndex,]
dim(training)
dim(testing)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
dim(training)
dim(testing)
head(training)
training[1:2,1:4]
testing[1:2,1:4]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(log(training$Superplasticizer)
)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(log(training$Superplasticizer))
dev.off()
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(log(training$Superplasticizer))
qplot(training$Superplasticizer)
min(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainIL <- training[,c(grep("^IL",colnames(training)))]
preProc <- preProcess(trainIL, method="pca",thresh=.9)
preProc
shinyapps::setAccountInfo(name='hsparra', token='8C376F7D16A05AB730D2119DBA74C3CF', secret='zqXPdWKEkNXa+GWzwxg6X/PvHnoWiE7M+JiTWaf9')
library(shinyapps)
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(name='hsparra', token='8C376F7D16A05AB730D2119DBA74C3CF', secret='zqXPdWKEkNXa+GWzwxg6X/PvHnoWiE7M+JiTWaf9')
library(rJava)
remove.packages(pkgs = "RWeka")
remove.packages(pkgs = "RWekajars")
install.packages("RWeka", type="source", repos="http://cran.us.r-project.org")
install.packages("tau")
library(tau)
txt <- "The quick brown fox jumps over the lazy dog."
textcnt(txt, method = "ngram")
textcnt(txt, method = "prefix", n = 5L)
textcnt(txt, method = "string")
textcnt(txt, method = "string", n=2L)
x <- txtcn(txt, method="string", n=3L)
x <- txtcnt(txt, method="string", n=3L)
x <- textcnt(txt, method="string", n=3L)
x[1]
x[1:2]
setwd("~/repos/coursera-ds/Capstone/Analysis")
install.packages("ngram")
library(ngram)
ng <- ngram(txt, n=2)
str(ng)
print(ng, full=TRUE)
y <- print(ng, full=TRUE)
rm(y)
ng[1]
str(ng)
txt2 <- textcnt(txt, method="ngram", n=2L)
txt2[1:2]
txt2 <- textcnt(txt, method="string", n=2L)
txt2[1:2]
dir()
con <- file("../small_twitter.txt","r")
sm_t <- readLines(con)
close(con)
str(sm_t)
library(tm)
install.packages("tm")
library(tm)
install.packages("stingr")
install.packages("stringr")
sm_t2 <- tolower(x = sm_t)
sm_t2[1]
sm_t[1]
sm_t[2]
sm_t2[2]
toSpace <- content_transformer(function(x, pattern) gsub(pattern, " ", x))
twit_subset <- apply(twit_subset, toSpace, "/|@|\\|")
sm_t2 <- apply(sm_t2, FUN=toSpace, "/|@|\\|")
sm_t2 <- vapply(sm_t2, FUN=toSpace, "/|@|\\|")
sm_t2 <- sapply(sm_t2, FUN=toSpace, "/|@|\\|")
sm_t[2]
sm_t2[2]
sm_t2 <- sapply(sm_t2, FUN=toSpace, pattern="/|@|\\|")
sm_t2 <- apply(sm_t2, 2, FUN=toSpace, "/|@|\\|")
sm_t2 <- apply(sm_t2, 1, FUN=toSpace, "/|@|\\|")
sm_t2 <- sapply(as.list(sm_t2, toSpace, "/|@|\\|"))
sm_t2 <- sapply(as.list(sm_t2, FUN=toSpace, "/|@|\\|"))
sm_t2 <- vapply(sm_t2, function(x, pattern) gsub(pattern, " ", x))
sm_t2 <- vapply(sm_t2, gsub("/|@|\\|", " ", x))
sm_t2 <- gsub("/|@|\\|", " ")
sm_t2 <- gsub("/|@|\\|", " ", sm_t2)
