slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
browseURL("index.html")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.test)
str(vowel.train
)
set.seed(33833)
library(caret)
rf <- train(y ~ ., data=vowel.train, method="rf")
bst <- train(y ~ ., data=vowel.train, method="gbm")
rf
rf$finalModel
bf$finalModel
bst$finalModel
bst
rfout <- predict(rf, newdata=vowel.test)
bstout <- predict(bst, newdata=vowel.test)
confusionMatrix(rfout, vowel.test$y)
confusionMatrix(bstout, vowel.test$y)
set.seed(33833)
rf <- train(y ~ ., data=vowel.train, method="rf")
rfout <- predict(rf, newdata=vowel.test)
confusionMatrix(rfout, vowel.test$y)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
rf <- train(y ~ ., data=vowel.train, method="rf")
rfout <- predict(rf, newdata=vowel.test)
confusionMatrix(rfout, vowel.test$y)
set.seed(33833)
rf <- train(y ~ ., data=vowel.train, method="rf")
bst <- train(y ~ ., data=vowel.train, method="gbm")
rfout <- predict(rf, newdata=vowel.test)
bstout <- predict(bst, newdata=vowel.test)
confusionMatrix(rfout, vowel.test$y)
confusionMatrix(bstout, vowel.test$y)
df2 <- data.frame(rfout, bstout, y=vowel.test$y)
combModel <- train(y ~ ., method="gam", data=df2)
combPred <- predict(combModel, df2)
confusionMatrix(combPred, df2$y)
rm(df2)
rm(combModel)
rm(combPred)
head(rfout)
tail(rfout)
head(rf)
head(vowel.train)
match <- rfout == bstout
head(match)
head(rfout)
head(bstout)
matchPreds <- rfout[match]
testMatch <- vowel.test[match]
testMatch <- vowel.test[match,"y"]
confusionMatrix(matchPreds, testMatch)
rm(list=ls())
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData <- data.frame(diagnosis,predictors)
inTrain <- createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training <- adData[ inTrain,]
testing <- adData[-inTrain,]
head(training)
str(training)
rf <- train(diagnosis ~ ., data=training, method="rf", verbose=FALSE)
bst <- train(diagnosis ~ ., data=training, method="gbm", verbose=FALSE)
lda <- train(diagnosis ~ ., data=training, method="lda", verbose=FALSE)
rfPred <- predict(rf, newdata=testing)
bstPred <- predict(bst, newdata=testing)
ldaPred <- predict(lda, newdata=testing)
comb <- data.frame(rfPred, bstPred, ldaPred, testing$diagnosis)
combMod <- train(diagnosis ~ ., data=comb, method="rf", verbose=FALSE)
combPred <- predict(combMod, comb$diagnosis)
str(rfPred)
length(rfPred)
lenght(bstPred)
length(bstPred)
length(ldaPred)
dim(testing)
dim(comb)
head(comb)
combMod <- train(diagnosis ~ ., method="rf", data=comb)
str(comb$rfPred)
str(comb)
combMod <- train(diagnosis ~ ., method="rf", data=comb, na.rm=TRUE)
combMod <- train(diagnosis ~ ., method="rf", data=na.omit(comb))
comb2 <- na.omit(comb)
str(comb2)
rm(comb2)
rfCM <- confusionMatrix(rfPred, testing$diagnosis)
bstCM <- confusionMatrix(bstPred, testing$diagnosis)
ldaCM <- confusionMatrix(ldaPred, testing$diagnosis)
rfCM$overall
bstCM$overall
ldaCM$overall
combMod <- train(diagnosis ~ ., method="rf", data=comb)
str(comb)
combMod <- train(testing.diagnosis ~ ., method="rf", data=comb)
combPred <- predict(combMod, comb$testing.diagnosis)
combCM <- confustionMatrix(combPred, testing$diagnosis)
combCM <- confusionMatrix(combPred, testing$diagnosis)
combCM$overall
set.seed(62433)
rf <- train(diagnosis ~ ., data=training, method="rf", verbose=FALSE)
set.seed(62433)
bst <- train(diagnosis ~ ., data=training, method="gbm", verbose=FALSE)
set.seed(62433)
lda <- train(diagnosis ~ ., data=training, method="lda", verbose=FALSE)
rfPred <- predict(rf, newdata=testing)
bstPred <- predict(bst, newdata=testing)
ldaPred <- predict(lda, newdata=testing)
comb <- data.frame(rfPred, bstPred, ldaPred, testing$diagnosis)
set.seed(62433)
combMod <- train(testing.diagnosis ~ ., method="rf", data=comb)
combPred <- predict(combMod, comb$testing.diagnosis)
combCM <- confusionMatrix(combPred, testing$diagnosis)
rfCM <- confusionMatrix(rfPred, testing$diagnosis)
bstCM <- confusionMatrix(bstPred, testing$diagnosis)
ldaCM <- confusionMatrix(ldaPred, testing$diagnosis)
combCM$overall
rfCM$overall
bstCM$overall
ldaCM$overall
rm(list=ls())
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
str(training)
?plot.enet
?enet
?plot
?plot.enet
??plot.enet
set.seed(233)
mod <- train(CompressiveStrength, method="lasso", data=training)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
mod <- train(CompressiveStrength, method="lasso", data=training)
mod <- train(CompressiveStrength ~ ., method="lasso", data=training)
?plot.enet
plot.enet(mod$finalModel, xvar="penalty", use.color=TRUE)
d <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv")
d <- read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv", method="curl")
fileUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv"
download.file(fileUrl, destfile="gaData.csv", method="curl")
d <- read.csv("gaData.csv")
head(d)
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
rm(d)
dat <- read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
install.packages("forecast")
library(forecast)
?bats
mod <- bats(training)
ts <- ts(training)
mod <- bats(ts)
?forecast
mod <- forecast(training)
mod <- forecast(ts)
head(training)
head(ts)
mod <- forecast(ts[,2:3])
mod <- forecast(training[,2:3])
ts <- ts(training[,2:3])
mod <- forecast(ts)
?forecast.bats
inTs <- bats(ts)
ts <- ts(training[,3])
ts <- ts(training[,3])
inTs <- bats(ts)
mod <- forecast.bats(inTs)
str(mod)
str(bas)
str(inTs)
mod <- forecast(inTs, h=235)
str(testing)
accuracy(mod, testing$visits)
accuracy(mod, testing$visitsTumblr)
head(mod)
pred <- predict(mod, testing$visitsTumblr)
confusionMatrix(pred, testing$visitsTumblr)
str(pred)
pred
pred$lower
plot(mod)
plot(prd)
plot(pred)
mod2 <- forecast(tstrain)
str(mod2)
accuracy(mod2, testing$visitsTumblr)
pred <- predict(mod2, testing$visitsTumblr)
str(pred)
str(pred$lower[,2])
str(pred$upper[,2])
str(testing$visitsTumblr)
within95 <- testing$visitsTumblr >= pred$lower[,2] & testing$visitsTumblr <= pred$upper[,2]
dim(testing$visitsTumblr)
length(testing$visitsTumblr)
mod2 <- forecast(tstrain, h=235)
pred <- predict(mod2, testing$visitsTumblr)
str(pred)
str(inTs)
str(training)
str(testing)
mod2 <- forecast(training$visitsTumblr, h=235)
pred <- predict(mod2, testing$visitsTumblr)
within95 <- testing$visitsTumblr >= pred$lower[,2] & testing$visitsTumblr <= pred$upper[,2]
length(within95)
sum(within95)
sum(within95)/length(within95)
rm(list=ls())
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(e1071)
set.seed(325)
str(traiing)
str(traiing)
str(training)
detach(e1071)
detach("e1071")
detach("package:e1071")
mod <- train(CompressiveStrength ~ ., method="svm", data=training)
library(e1071)
mod <- train(CompressiveStrength ~ ., method="svm", data=training)
mod <- svm(CompressiveStrength ~ ., data=training)
pred <- predict(mod, testing)
sqrt(mean((pred-testing$CompressiveStrength)^2))
rm(list=ls())
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData <- data.frame(diagnosis,predictors)
inTrain <- createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training <- adData[ inTrain,]
testing <- adData[-inTrain,]
set.seed(62433)
rf <- train(diagnosis ~ ., data=training, method="rf", verbose=FALSE)
set.seed(62433)
bst <- train(diagnosis ~ ., data=training, method="gbm", verbose=FALSE)
set.seed(62433)
lda <- train(diagnosis ~ ., data=training, method="lda", verbose=FALSE)
rfPred <- predict(rf, newdata=testing)
bstPred <- predict(bst, newdata=testing)
ldaPred <- predict(lda, newdata=testing)
comb <- data.frame(rfPred, bstPred, ldaPred, training$diagnosis)
set.seed(62433)
combMod <- train(training.diagnosis ~ ., method="rf", data=comb)
combPred <- predict(combMod, testing.diagnosis)
combCM <- confusionMatrix(combPred, testing$diagnosis)
rfCM <- confusionMatrix(rfPred, testing$diagnosis)
bstCM <- confusionMatrix(bstPred, testing$diagnosis)
ldaCM <- confusionMatrix(ldaPred, testing$diagnosis)
combCM$overall
rfCM$overall
bstCM$overall
ldaCM$overall
length(rfPred)
length(bstPred)
length(ldaPred)
length(training$diagnosis)
set.seed(62433)
combMod <- train(testing.diagnosis ~ ., method="rf", data=comb)
combPred <- predict(combMod, testing.diagnosis)
comb <- data.frame(rfPred, bstPred, ldaPred, testing$diagnosis)
set.seed(62433)
combMod <- train(testing.diagnosis ~ ., method="rf", data=comb)
combPred <- predict(combMod, testing.diagnosis)
combPred <- predict(combMod, testing$diagnosis)
combCM <- confusionMatrix(combPred, testing$diagnosis)
combCM$overall
set.seed(62433)
rf <- train(diagnosis ~ ., data=training, method="rf", verbose=FALSE)
#set.seed(62433)
bst <- train(diagnosis ~ ., data=training, method="gbm", verbose=FALSE)
#set.seed(62433)
lda <- train(diagnosis ~ ., data=training, method="lda", verbose=FALSE)
rfPred <- predict(rf, newdata=testing)
bstPred <- predict(bst, newdata=testing)
ldaPred <- predict(lda, newdata=testing)
comb <- data.frame(rfPred, bstPred, ldaPred, testing$diagnosis)
#set.seed(62433)
combMod <- train(testing.diagnosis ~ ., method="rf", data=comb)
combPred <- predict(combMod, testing$diagnosis)
combCM <- confusionMatrix(combPred, testing$diagnosis)
rfCM <- confusionMatrix(rfPred, testing$diagnosis)
bstCM <- confusionMatrix(bstPred, testing$diagnosis)
ldaCM <- confusionMatrix(ldaPred, testing$diagnosis)
combCM$overall
rfCM$overall
bstCM$overall
ldaCM$overall
setwd("~/Documents/Coursera/Data Science Specialization/Data Product/Peer Projects/001.FATCA")
dir()
dir()
library(shiny)
runApp()
rfCM$overall
bstCM$overall
ldaCM$overall
comb <- data.frame(bstPred, ldaPred, rfPred, testing$diagnosis)
set.seed(62433)
rf <- train(diagnosis ~ ., data=training, method="rf", verbose=FALSE)
#set.seed(62433)
bst <- train(diagnosis ~ ., data=training, method="gbm", verbose=FALSE)
#set.seed(62433)
lda <- train(diagnosis ~ ., data=training, method="lda", verbose=FALSE)
rfPred <- predict(rf, newdata=testing)
bstPred <- predict(bst, newdata=testing)
ldaPred <- predict(lda, newdata=testing)
rfCM <- confusionMatrix(rfPred, testing$diagnosis)
bstCM <- confusionMatrix(bstPred, testing$diagnosis)
ldaCM <- confusionMatrix(ldaPred, testing$diagnosis)
rfCM$overall
bstCM$overall
ldaCM$overall
comb <- data.frame(bstPred, ldaPred, rfPred, testing$diagnosis)
#set.seed(62433)
combMod <- train(testing.diagnosis ~ ., method="rf", data=comb)
combPred <- predict(combMod, testing$diagnosis)
combCM <- confusionMatrix(combPred, testing$diagnosis)
combCM$overall
set.seed(62433)
rf <- train(diagnosis ~ ., data=training, method="rf", verbose=FALSE)
set.seed(62433)
bst <- train(diagnosis ~ ., data=training, method="gbm", verbose=FALSE)
set.seed(62433)
lda <- train(diagnosis ~ ., data=training, method="lda", verbose=FALSE)
rfPred <- predict(rf, newdata=testing)
bstPred <- predict(bst, newdata=testing)
ldaPred <- predict(lda, newdata=testing)
rfCM <- confusionMatrix(rfPred, testing$diagnosis)
bstCM <- confusionMatrix(bstPred, testing$diagnosis)
ldaCM <- confusionMatrix(ldaPred, testing$diagnosis)
rfCM$overall
bstCM$overall
ldaCM$overall
comb <- data.frame(bstPred, ldaPred, rfPred, testing$diagnosis)
set.seed(62433)
combMod <- train(testing.diagnosis ~ ., method="rf", data=comb)
combPred <- predict(combMod, testing$diagnosis)
combCM <- confusionMatrix(combPred, testing$diagnosis)
combCM$overall
combMod <- train(testing.diagnosis ~ ., method="rf", data=comb)
combPred <- predict(combMod, testing$diagnosis)
combCM <- confusionMatrix(combPred, testing$diagnosis)
combCM$overall
rm(list=ls())
gc()
detach("package:gbm", unload=TRUE)
setwd("~/Desktop/temp2")
dir()
d <- read.csv("RCC-prelimapr2011", stringAsFactors=F)
d <- read.csv("RCC-prelimapr2011", stringsAsFactor=F)
dim(d)
head(d)
class(d)
str(d)
install.packages("DescTools")
library("DescTools")
library("DescTools", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
head(d.pizza)
- driver (factor)
desc(d.pizza$driver)
Desc(d.pizza$driver)
setwd("~/Documents/Data Analysis/Temp Play")
DescWrd(d.pizza$driver,"DescWrd")
Desc(d.pizza[,c("driver","temperature","count","weekday","wine_ordered","date")], plotit=TRUE)
wrd <‐ GetNewWrd()
wrd <‐ GetNewWrd()
upgrade()
upgrade("shiny")
update.packages(checkBuilt = TRUE, ask=FALSE)
rm(list=ls())
install.packages("magrittr")
mtcars %>%
ggvis(~wt, ~mpg) %>%
layer_smooths(span = input_slider(0.5, 1, value = 1)) %>%
layer_points(size := input_slider(100, 1000, value = 100))
library(ggvis)
install.packages("ggvis")
install.packages("dplyr")
mtcars %>%
ggvis(~wt, ~mpg) %>%
layer_smooths(span = input_slider(0.5, 1, value = 1)) %>%
layer_points(size := input_slider(100, 1000, value = 100))
library(ggvis)
mtcars %>%
ggvis(~wt, ~mpg) %>%
layer_smooths(span = input_slider(0.5, 1, value = 1)) %>%
layer_points(size := input_slider(100, 1000, value = 100))
3 + 4
